/*
 * <!--
 *   ~ Copyright (c) 2017. ThanksMister LLC
 *   ~
 *   ~ Licensed under the Apache License, Version 2.0 (the "License");
 *   ~ you may not use this file except in compliance with the License. 
 *   ~ You may obtain a copy of the License at
 *   ~
 *   ~ http://www.apache.org/licenses/LICENSE-2.0
 *   ~
 *   ~ Unless required by applicable law or agreed to in writing, software distributed 
 *   ~ under the License is distributed on an "AS IS" BASIS, 
 *   ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 *   ~ See the License for the specific language governing permissions and 
 *   ~ limitations under the License.
 *   -->
 */

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}

def versionMajor = 0
def versionMinor = 7
def versionPatch = 7
def versionBuild = 2 // bump for dog food builds, public betas, etc.

def ALARM_CODE() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("alarmCode");
}

def TELEGRAM_TOKEN() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("telegramToken");
}

def TELEGRAM_CHAT_ID() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("telegramChatId");
}

def DARK_SKY_KEY() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("darkSkyKey");
}

def MAIL_GUN_KEY() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("mailGunApiKey");
}

def MAIL_GUN_URL() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("mailGunUr");
}

def IMGUR_CLIENT_ID() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("clientId");
}

def LATITUDE() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("lat");
}

def LONGITUDE() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("lon");
}

def MAIL_FROM() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("mailFrom");
}

def MAIL_TO() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("mailTo");
}

def HASS_URL() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("hassUrl");
}

def BROKER() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("broker");
}

def IMGUR_TAG() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("tag");
}

android {
    kapt {
        generateStubs = true
    }
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        applicationId "com.thanksmister.iot.mqtt.alarmpanel"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"
    productFlavors {
        def BASE_ENVIRONMENT = "BASE_ENVIRONMENT"
        dev {
            dimension "default"
            buildConfigField "String", BASE_ENVIRONMENT, '"DEV_ENVIRONMENT"'
            applicationId "com.thanksmister.iot.mqtt.alarmpanel"
            versionName "${versionMajor}.${versionMinor}.${versionPatch} Build ${versionBuild}-DEV"
            buildConfigField 'Integer', 'ALARM_CODE', ALARM_CODE()
            buildConfigField 'String', 'DARK_SKY_KEY', "\"" + DARK_SKY_KEY() +"\""
            buildConfigField 'String', 'MAIL_GUN_KEY', "\"" + MAIL_GUN_KEY() +"\""
            buildConfigField 'String', 'MAIL_GUN_URL', "\"" + MAIL_GUN_URL() +"\""
            buildConfigField 'String', 'IMGUR_CLIENT_ID', "\"" + IMGUR_CLIENT_ID() +"\""
            buildConfigField 'String', 'LATITUDE', "\"" + LATITUDE() +"\""
            buildConfigField 'String', 'LONGITUDE', "\"" + LONGITUDE() +"\""
            buildConfigField 'String', 'MAIL_FROM', "\"" + MAIL_FROM() +"\""
            buildConfigField 'String', 'MAIL_TO', "\"" + MAIL_TO() +"\""
            buildConfigField 'String', 'HASS_URL', "\"" + HASS_URL() +"\""
            buildConfigField 'String', 'BROKER', "\"" + BROKER() +"\""
            buildConfigField 'String', 'IMGUR_TAG', "\"" + IMGUR_TAG() +"\""
            buildConfigField 'String', 'TELEGRAM_TOKEN', "\"" + TELEGRAM_TOKEN() +"\""
            buildConfigField 'String', 'TELEGRAM_CHAT_ID', "\"" + TELEGRAM_CHAT_ID() +"\""
        }
        qa {
            dimension "default"
            buildConfigField "String", BASE_ENVIRONMENT, '"QA_ENVIRONMENT"'
            applicationId "com.thanksmister.iot.mqtt.alarmpanel"
            versionName "${versionMajor}.${versionMinor}.${versionPatch} Build ${versionBuild}-QA"
        }
        prod {
            dimension "default"
            buildConfigField "String", BASE_ENVIRONMENT, '"PROD_ENVIRONMENT"'
            applicationId "com.thanksmister.iot.mqtt.alarmpanel"
            versionName "${versionMajor}.${versionMinor}.${versionPatch} Build ${versionBuild}"
            buildConfigField 'Integer', 'ALARM_CODE', '1234'
            buildConfigField 'String', 'DARK_SKY_KEY', '""'
            buildConfigField 'String', 'MAIL_GUN_KEY', '""'
            buildConfigField 'String', 'MAIL_GUN_URL','""'
            buildConfigField 'String', 'IMGUR_CLIENT_ID', '""'
            buildConfigField 'String', 'LATITUDE', '""'
            buildConfigField 'String', 'LONGITUDE', '""'
            buildConfigField 'String', 'MAIL_FROM', '""'
            buildConfigField 'String', 'MAIL_TO', '""'
            buildConfigField 'String', 'HASS_URL', '""'
            buildConfigField 'String', 'BROKER', '""'
            buildConfigField 'String', 'IMGUR_TAG', '""'
            buildConfigField 'String', 'TELEGRAM_TOKEN', '""'
            buildConfigField 'String', 'TELEGRAM_CHAT_ID', '""'
        }
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

ext {
    archVersion = '1.1.0'
    archRoomVersion = '1.0.0'
    supporVersion = "27.+"
    dagger = "2.12"
    retrofit = "2.2.0"
    stetho = "1.3.1"
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile "com.android.support:appcompat-v7:${supporVersion}"
    compile "com.android.support:gridlayout-v7:${supporVersion}"
    compile "com.android.support:support-v4:${supporVersion}"
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile "com.android.support:cardview-v7:${supporVersion}"
    compile "com.android.support:recyclerview-v7:${supporVersion}"
    compile "com.android.support:design:${supporVersion}"
    compile "com.android.support:preference-v14:${supporVersion}"

    // 3rd party
    compile 'fr.baloomba:viewpagerindicator:2.4.2'

    // RxJava
    compile 'io.reactivex.rxjava2:rxjava:2.1.7'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // Android architecture
    implementation "android.arch.lifecycle:extensions:${archVersion}"
    annotationProcessor "android.arch.lifecycle:compiler:${archVersion}"
    implementation "android.arch.lifecycle:reactivestreams:${archVersion}"
    implementation "android.arch.persistence.room:runtime:${archRoomVersion}"
    kapt "android.arch.persistence.room:compiler:${archRoomVersion}"
    implementation "android.arch.persistence.room:rxjava2:${archRoomVersion}"

    // MQTT
    compile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.0'
    compile 'org.eclipse.paho:org.eclipse.paho.android.service:1.1.1'

    // Image
    compile 'com.squareup.picasso:picasso:2.5.2'

    // Retrofit
    compile "com.squareup.retrofit2:retrofit:${retrofit}"
    compile "com.squareup.retrofit2:converter-gson:${retrofit}"
    compile "com.squareup.retrofit2:adapter-rxjava2:${retrofit}"

    // OKHttp
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    compile 'com.squareup.okhttp3:okhttp:3.4.1'

    // Dagger
    compile "com.google.dagger:dagger:${dagger}"
    annotationProcessor "com.google.dagger:dagger-compiler:${dagger}"
    compile "com.google.dagger:dagger-android-support:${dagger}"
    kapt "com.google.dagger:dagger-compiler:${dagger}"
    compile "com.google.dagger:dagger-android:${dagger}"
    annotationProcessor "com.google.dagger:dagger-android-processor:${dagger}"
    kapt "com.google.dagger:dagger-android-processor:${dagger}"

    // Logging
    compile 'com.jakewharton.timber:timber:4.5.1'

    // Stetho
    compile "com.facebook.stetho:stetho:${stetho}"
    compile "com.facebook.stetho:stetho-okhttp3:${stetho}"
    compile "com.facebook.stetho:stetho-urlconnection:${stetho}"

    // Parcelling
    compile 'com.github.frankiesardo:auto-parcel:0.3'
    annotationProcessor 'com.github.frankiesardo:auto-parcel-processor:0.3'

    // Fingerprint Identify
    compile 'com.wei.android.lib:fingerprintidentify:1.2.1'

    // Home Assistant WebView
    compile 'com.github.sjvc:Home-Assistant-WebView:master-SNAPSHOT'

    compile 'joda-time:joda-time:2.9.9'

    testCompile 'junit:junit:4.12'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}